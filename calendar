#!/bin/bash

# A simple calendar app for Bash
# Author: Jason Seminara
# Date: 2015-11-07

# check to see that we have some args 
[ $# -eq 0 ] && echo "No arguments supplied" && exit 1
[ $# -lt 2 ] && echo "Not enough arguments (expecting at least 2)" && exit 1


# if the .calendar folder doesn't exist, create it. 
CAL_DIR=~/.calendar
[ ! -d $CAL_DIR ] && mkdir $CAL_DIR && echo created folder


case $1 in 
  
  create)
    # die if the args are insufficient
    [ $# -lt 3 ] && echo "Not enough arguments! (usage: calendar create time length [title])" && exit 1
    
    # if there's no stin and no 4th param - die 
    [ -t 0 ] && [ $# -lt 4 ] && echo Must provide a title && exit 1
    
    # 
    description=''

    # The last argument is optional. If supplied, the title will come from this argument. Otherwise, the title will come from the first line of standard input. 
    # if we don't have a 4th param, look for the stin
    if [ $# -lt 4 ]
    then
      title=$(head -1)
    else

      # we have a 4th param
      # if we have stin, it's the description
      title=$4
      [ ! -t 0 ] && description=$(cat)

    fi
    
    # The date itself should be parsed with the date command (using date -d), and the length is specified in minutes and can be any positive integer.
    [ $3 -lt 0 ] && echo "Duration must be a positive number." && exit 1   

    startDate=$(gdate -d "$2" +%s)
    endDate=$(($startDate+(($3*60))))

    # If event already exists at that time, an error message should be printed to stderr and the command should exit with a non-zero exit status.
    [ -e $CAL_DIR/$startDate ] && echo "Event already exists" >&2 && exit 1

    # Pretty-print the results
    printf "$startDate\n$endDate\n$title\n$description\n" > $CAL_DIR/$startDate
    echo $startDate
    exit 0 
    ;;

  delete)
    # If the event exists and is successfully deleted, the exit status should be 0. 
    # If the event does not exist, the exit status should be 1. 
    # If any other error occurs, the exit status should be 2.
    [ ! -e $CAL_DIR/$startDate ]  && exit 1
    rm -rf $CAL_DIR/$2 
    exit $?
    ;;

  show)
    
    # If no argument is specified, all of these should be shown.
    [ $# -lt 3 ] && set $1 $2 'time' title description
    
    [ ! -e $CAL_DIR/$2 ] && exit 1

    # Split file on \n and read into an array
    f=()
    while IFS= read -r aline; do f+=("$aline") ; done < $CAL_DIR/$2 
    
    # walk over the args and output the requested attr of the cal file
    for var in "$@"
    do
      case $var in
      
      title)
        echo ${f[2]}
      ;;

      description)
        echo ${f[3]}
      ;;
      
      time)
        echo $(gdate -d "@${f[0]}") to $(gdate -d "@${f[1]}")
      ;;
      
      esac 
    done
    ;;

  link)

    # die if the destination doesn't exist or the current file already exists
    [ ! -e "/Users/$2/.calendar/$3" ] && exit 1
    ln -s "/Users/$2/.calendar/$3" $CAL_DIR/$3
    exit $?
    ;;

  export) 
    user_id=$USER
    [ $# -lt 3 ] && echo "Not enough arguments (expecting at least 4)" && exit 1
    
    # If we've been given the 2nd param (userID), then update the userID and shift the params by one more
    [ $# -eq 4 ] && user_id=$2 && shift 1  
    
    # this is to expose the last two params
    shift 1
    startDate=$(gdate -d "$1" +%s)
    endDate=$(gdate -d "$2" +%s)
    
    # set up the vcard layout
    vcard_header="BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Open Source Tools//Calendar for $user_id//EN
"
vcard_footer="END:VCALENDAR"
vcard_body=''


  
    # walk over the files in the user's directory, reci
    for path in /Users/$user_id/.calendar/*
    do
      # get the filename from the path
      filename="${path##*/}"

      # continue here if the date is outside the range, or if the file is empty or a symlink is broken 
      ([ "$filename" -le "$startDate" ] || [ "$filename" -ge "$endDate" ] || [ ! -s "$path" ] ) && continue
      
      # create an array of the each of the file datae
      f=()
      while IFS= read -r line; do f+=("$line") ; done < $path  

      # so the code doesn't get ugly below, let's make our UTC-floating time-strings here
      utc_startDate=$(gdate -d "@${f[0]}" -u +%Y%m%dT%H%M%SZ)
      utc_endDate=$(gdate -d "@${f[1]}" -u +%Y%m%dT%H%M%SZ)

      # build the vcard_body
      vcard_body+="BEGIN:VEVENT
UID:${user_id}_${f[0]}
DTSTAMP:${utc_startDate}
ORGANIZER;CN=$user_id:MAILTO:$user_id@cims.nyu.edu
DTSTART:${utc_startDate}
DTEND:${utc_endDate}
SUMMARY:${f[2]}
DESCRIPTION:${f[3]}
END:VEVENT
"
    done

    echo "$vcard_header""$vcard_body""$vcard_footer"
    ;;

esac


